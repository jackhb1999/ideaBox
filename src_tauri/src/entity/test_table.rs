//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::ActiveValue;
use sea_orm::entity::prelude::*;
use sea_orm::prelude::async_trait::async_trait;
use sea_orm::sqlx::types::uuid::Version::Random;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "test_table")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    #[sea_orm(column_type = "Text")]
    pub color: String,
    #[sea_orm(column_type = "Text")]
    pub content: String,
    #[sea_orm(column_name = "createTime", column_type = "Text")]
    pub create_time: String,
    #[sea_orm(column_name = "updateTime", column_type = "Text")]
    pub update_time: String,
    #[sea_orm(column_type = "Text")]
    pub status: i8,
    #[sea_orm(column_name = "isDelete")]
    pub is_delete: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(mut self, db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait
    {
        if insert {
            self.id = ActiveValue::Set(1);
        }
        Ok(self)
    }
}
